# ============================================================================
# FastFood Layerwise Subspace Merging Configuration
# Different projection sizes for different layers
# ============================================================================

_target_: fusion_bench.method.fastfood_merging.fastfood_merging_layerwise.FastfoodSubspaceMergeAlgorithm

# ============================================================================
# Core FastFood Parameters
# ============================================================================
proj_ratio: 0.10              # Base/default projection ratio (0.0-1.0)
transform_type: "srht"        # Transform type: "fwht" | "srht" | "dct" | "dht" | "none" | null
                              # Use "none" or null to merge in original space without projection
device: "cuda"                # Computation device
block_rows: 8192              # Memory management for large tensors

# ============================================================================
# Layer-wise Projection Configuration
# ============================================================================
layer_proj_mode: "inverse"    # custom | inverse | forward | feature_split
                              # inverse: earlier layers get larger projections
                              # forward: later layers get larger projections
                              # feature_split: split into feature extractor and rest
                              # custom: explicit layer -> proj_ratio mapping

# Custom layer projections (for layer_proj_mode="custom")
# Example:
# layer_projections:
#   "model.layer.0": 0.15
#   "model.layer.6": 0.10
#   "model.layer.11": 0.05

# Feature split parameters (for layer_proj_mode="feature_split")
feature_extractor_layers: 8   # Number of first layers in feature extractor
feature_proj_ratio: 0.05      # Projection ratio for feature extractor layers
rest_proj_ratio: 0.15         # Projection ratio for remaining layers

# ============================================================================
# Merging Strategy
# ============================================================================
merge_where: "subspace"       # subspace | postlift
merge_func: "signmax"         # sum | mean | max | signmax | ema | ties_sum | ties_mean | ties_max

# ============================================================================
# Task Vector Weights (optional)
# ============================================================================
# weights: null               # Task-specific weights (normalized internally)
# scale: 1.0                  # Post-merge scaling factor

# ============================================================================
# EMA Parameters (Active when merge_func="ema")
# ============================================================================
ema_task_order: "given"       # given | random | cosine_similarity | custom
ema_gamma: 1.2                # Sigmoid scaling factor (0.5-2.0)
ema_w_c: 0.6                  # Cosine alignment weight (0.0-1.0)
ema_w_s: 0.4                  # Scale ratio weight (0.0-1.0, w_c + w_s = 1.0)
# ema_custom_order:           # Custom task order (when ema_task_order="custom")
#   - "SUN397"
#   - "Stanford-Cars"
#   - "DTD"

# ============================================================================
# Analysis Integration (Optional)
# ============================================================================
run_analysis: false           # Run integrated analysis after merging
analysis_methods: []          # List of analysis methods to run
  # - merged_task_vector      # Unified analysis (original + subspace + lifted)
  # - task_vector_similarity  # Cosine similarity analysis
  # - task_vector_layer       # Layer-wise analysis
analysis_output_path: null    # Path for analysis outputs

# ============================================================================
# Layer Projection Modes Explained
# ============================================================================
#
# 1. INVERSE MODE (default)
#    - Earlier layers get LARGER projections (inverse weighting)
#    - Formula: proj_ratio * (1.0 / normalized_position)
#    - Rationale: Earlier layers contain more general features
#    - Example for 12 layers with proj_ratio=0.10:
#      Layer 0: 0.12, Layer 5: 0.087, Layer 11: 0.083
#
# 2. FORWARD MODE
#    - Later layers get LARGER projections (forward weighting)
#    - Formula: proj_ratio * normalized_position
#    - Rationale: Later layers contain more task-specific features
#    - Example for 12 layers with proj_ratio=0.10:
#      Layer 0: 0.083, Layer 5: 0.087, Layer 11: 0.12
#
# 3. FEATURE_SPLIT MODE
#    - Split model into feature extractor and task-specific layers
#    - Layers 0 to feature_extractor_layers-1: use feature_proj_ratio
#    - Remaining layers: use rest_proj_ratio
#    - Example with feature_extractor_layers=8:
#      Layers 0-7: feature_proj_ratio (e.g., 0.05)
#      Layers 8+: rest_proj_ratio (e.g., 0.15)
#
# 4. CUSTOM MODE
#    - Explicit layer -> projection ratio mapping
#    - Provide layer_projections dict with layer names and ratios
#    - Falls back to proj_ratio for unmapped layers
#
# ============================================================================

# ============================================================================
# Usage Examples
# ============================================================================
#
# Example 1: Inverse weighting (earlier layers get more projection)
# layer_proj_mode: "inverse"
# proj_ratio: 0.10
#
# Example 2: Feature split (small for early, large for late)
# layer_proj_mode: "feature_split"
# feature_extractor_layers: 8
# feature_proj_ratio: 0.05
# rest_proj_ratio: 0.20
#
# Example 3: Custom mapping
# layer_proj_mode: "custom"
# layer_projections:
#   "model.layer.0": 0.15
#   "model.layer.6": 0.10
#   "model.layer.11": 0.05
# proj_ratio: 0.08  # Fallback for unmapped layers
#
# Example 4: Forward weighting with EMA
# layer_proj_mode: "forward"
# proj_ratio: 0.12
# merge_func: "ema"
# ema_task_order: "cosine_similarity"
# ema_gamma: 1.5
#
# ============================================================================
